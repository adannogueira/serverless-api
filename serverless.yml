# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: serverless-api
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '3'

provider:
  name: aws
  runtime: python3.8

# you can overwrite defaults here
  stage: dev
  region: us-east-1
  profile: serverless-admin
  timeout: 10
  memorySize: 128

# you can add statements to the Lambda function's IAM Role here
  iam:
    role:
     statements:
       - Effect: "Allow"
         Action:
           - "dynamodb:Query"
           - "dynamodb:Scan"
           - "dynamodb:GetItem"
           - "dynamodb:PutItem"
           - "dynamodb:UpdateItem"
           - "dynamodb:DeleteItem"
         Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"

# you can define service wide environment variables here
  environment:
    DYNAMODB_TABLE: ${self:custom.dynamotable}
    REGION_NAME: ${self:provider.region}

# you can add packaging information here
#package:
#  patterns:
#    - '!exclude-me.py'
#    - '!exclude-me-dir/**'
#    - include-me.py
#    - include-me-dir/**

functions:
  create:
    handler: handler.create
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
    events:
      - http:
          path: /posts/create
          method: post

  get:
    handler: handler.get
    events:
      - http:
          path: /posts/get/{postId}
          method: get

  all:
    handler: handler.all
    events:
      - http:
          path: /posts/all
          method: get

  update:
    handler: handler.update
    events:
      - http:
          path: /posts/update/{postId}
          method: put

  delete:
    handler: handler.delete
    events:
      - http:
          path: /posts/delete/{postId}
          method: delete

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
  Resources:
    postsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

plugins:
  - serverless-python-requirements

custom:
  dynamotable: the-posts
  pythonRequirements:
    dockerizePip: non-linux